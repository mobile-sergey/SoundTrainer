//
//  ColumsView.swift
//  SoundTrainer
//
//  Created by Sergey on 21.03.2025.
//

import SwiftUI

struct LevelsView: View {
    let collectedStars: [Bool]
    let onStarCollected: (Int) -> Void
    let difficulty: Constants.Difficulty
    let cosmoPosition: Constants.CosmoPosition
    let currentLevel: Int // –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    @State private var starPositions: [Int: CGPoint] = [:]
    @State private var initialAnimationCompleted: Bool = false
    @State private var animatingStarIndex: Int? = nil

    var body: some View {
        GeometryReader { geometry in
            ZStack {
                drawLevels(geometry)
                drawStars()
                drawAstronaut(geometry)
            }
        }
        .onAppear {
            print("üåü LevelsView –ø–æ—è–≤–∏–ª—Å—è. –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤—ë–∑–¥:", collectedStars)
            // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                initialAnimationCompleted = true
            }
        }
        .onChange(of: collectedStars) { newStars in
            print("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è collectedStars:", newStars)
            if let newStarIndex = newStars.enumerated().first(where: { $0.element && !collectedStars[$0.offset] })?.offset {
                print("‚≠êÔ∏è –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–±–æ—Ä–∞ –¥–ª—è –∑–≤–µ–∑–¥—ã \(newStarIndex)")
                animatingStarIndex = newStarIndex
                DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                    print("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–±–æ—Ä–∞ –¥–ª—è –∑–≤–µ–∑–¥—ã \(newStarIndex)")
                    animatingStarIndex = nil
                }
            }
        }
    }

    private func drawLevels(_ geometry: GeometryProxy) -> some View {
        let stairWidth = geometry.size.width * Constants.Level.width

        return ZStack {
            ForEach(0..<difficulty.levelHeights.count) { index in
                let levelHeight = difficulty.levelHeights[index]
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±–∏–∫–æ–≤
                let height = geometry.size.height * levelHeight * Constants.Level.maxHeight
                let currentX = geometry.size.width - stairWidth * 2.5 + (CGFloat(index) * stairWidth)

                RoundedRectangle(cornerRadius: 25)
                    .fill(
                        LinearGradient(
                            colors: getGradientColors(for: index),
                            startPoint: .bottom,
                            endPoint: .top
                        )
                    )
                    .frame(
                        width: stairWidth,
                        height: height
                    )
                    .position(
                        x: currentX,
                        y: geometry.size.height - height / 2
                    )
                    .onChange(of: geometry.size) { _ in
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–≤–µ–∑–¥
                        starPositions[index] = CGPoint(
                            x: currentX,
                            y: geometry.size.height - height + (CGFloat(index) * stairWidth / 3)
                        )
                    }
            }
        }
    }

    private func drawStars() -> some View {
        return ZStack {
            ForEach(Array(starPositions.keys.sorted()), id: \.self) { index in
                if let position = starPositions[index] {
                    Group {
                        if !initialAnimationCompleted {
                            // –ù–∞—á–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–≤—ë–∑–¥
                            AnimationView(name: Constants.Anim.star)
                                .setLoopMode(.playOnce)
                                .setContentMode(.scaleAspectFill)
                                .frame(width: 100, height: 100)
                                .position(position)
                                .onAppear {
                                    print("üé¨ –ó–≤–µ–∑–¥–∞ \(index): –ù–∞—á–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è")
                                }
                        } else if !collectedStars[index] || animatingStarIndex == index {
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–±–æ —Å—Ç–∞—Ç–∏—á–Ω—É—é –∑–≤–µ–∑–¥—É, –ª–∏–±–æ –∞–Ω–∏–º–∞—Ü–∏—é —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∞
                            ZStack {
                                // –°—Ç–∞—Ç–∏—á–Ω–∞—è –∑–≤–µ–∑–¥–∞
                                if !collectedStars[index] {
                                    Image("Star")
                                        .resizable()
                                        .frame(width: 100, height: 100)
                                        .position(position)
                                        .onAppear {
                                            print("‚≠êÔ∏è –ó–≤–µ–∑–¥–∞ \(index): –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—á–Ω–æ–π –∑–≤–µ–∑–¥—ã")
                                        }
                                }
                                
                                // –ê–Ω–∏–º–∞—Ü–∏—è —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ
                                if animatingStarIndex == index {
                                    AnimationView(name: Constants.Anim.fireworks)
                                        .setLoopMode(.playOnce)
                                        .setContentMode(.scaleAspectFill)
                                        .frame(width: 100, height: 100)
                                        .position(position)
                                        .onAppear {
                                            print("üéÜ –ó–≤–µ–∑–¥–∞ \(index): –ê–Ω–∏–º–∞—Ü–∏—è —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∞")
                                        }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    private func drawAstronaut(_ geometry: GeometryProxy) -> some View {
        // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: (0,0) –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
        // X —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤–ø—Ä–∞–≤–æ, Y —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤–≤–µ—Ä—Ö
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        let stairWidth = geometry.size.width * Constants.Level.width
        
        // –ü–æ–∑–∏—Ü–∏—è –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å—Ç–æ–ª–±—Ü–µ
        let columnX = stairWidth + (CGFloat(currentLevel) * stairWidth)
        let astronautX = columnX - stairWidth / 2
        let astronautY = geometry.size.height - Constants.Cosmo.height * 0.3 - cosmoPosition.y
        
        return AnimationView(name: Constants.Anim.austronaut)
            .setLoopMode(.loop)
            .setContentMode(.scaleAspectFill)
            .frame(width: Constants.Cosmo.width, height: Constants.Cosmo.height)
            .position(
                x: astronautX,
                y: astronautY
            )
    }

    private func getGradientColors(for index: Int) -> [Color] {
        switch index {
        case 0:
            return [Color(hex: "4B7BF5"), Color(hex: "A682FF")]  // –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å–∏–Ω–∏–π-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        case 1:
            return [Color(hex: "6C7689"), Color(hex: "9BA5C9")]  // –í—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü —Å–µ—Ä–æ-–≥–æ–ª—É–±–æ–π
        case 2:
            return [Color(hex: "D9D9D9"), Color(hex: "FFFFFF")]  // –¢—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
        default:
            return [.blue, .purple]
        }
    }
}

// MARK: - Preview
    #Preview {
        LevelsView(
            collectedStars: [false, true, false],
            onStarCollected: { _ in },
            difficulty: .easy,
            cosmoPosition: Constants.CosmoPosition.zero,
            currentLevel: 0
        )
        .frame(width: 400, height: 600)
        .background(Color.black)
    }
